#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 6

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(300, PIN, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.


void setup() {
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  // End of trinket special code

  strip.begin();
  strip.setBrightness(50);
  strip.show(); // Initialize all pixels to 'off'
  
}

int hour1 = 1;
 int hour2 = 2;
 int hour3 = 5;
 int hour4 = 4;
void loop() {
  // Some example procedures showing how to display to the pixels:
  colorWipeAll(strip.Color(255,0,0), 5);

  strip.clear();
  colorWipeNoShow(strip.Color(255,0,0),0,3);
  colorWipeNoShow(strip.Color(255,0,0),0,10);
  colorWipeNoShow2(strip.Color(255,0,0),0,17);
  colorWipeNoShow2(strip.Color(255,0,0),0,24);
  strip.show();
  delay(500);
  strip.clear();
  colorWipeNoShow(strip.Color(255,0,0),0,4);
  colorWipeNoShow(strip.Color(255,0,0),0,11);
  colorWipeNoShow2(strip.Color(255,0,0),0,18);
  colorWipeNoShow2(strip.Color(255,0,0),0,25);
  strip.show();
  delay(500);
  strip.clear();
  colorWipeNoShow(strip.Color(255,0,0),0,5);
  colorWipeNoShow(strip.Color(255,0,0),0,12);
  colorWipeNoShow2(strip.Color(255,0,0),0,19);
  colorWipeNoShow2(strip.Color(255,0,0),0,26);
  strip.show();
  delay(500);
  strip.clear();
  colorWipeNoShow(strip.Color(255,0,0),0,6);
  colorWipeNoShow(strip.Color(255,0,0),0,13);
  colorWipeNoShow2(strip.Color(255,0,0),0,20);
  colorWipeNoShow2(strip.Color(255,0,0),0,27);
  strip.show();
  delay(500);
  strip.clear();
  colorWipeNoShow(strip.Color(255,0,0),0,1);
  colorWipeNoShow(strip.Color(255,0,0),0,8);
  colorWipeNoShow2(strip.Color(255,0,0),0,15);
  colorWipeNoShow2(strip.Color(255,0,0),0,22);
  strip.show();
  delay(500);
  strip.clear();
  colorWipeNoShow(strip.Color(255,0,0),0,2);
  colorWipeNoShow(strip.Color(255,0,0),0,9);
  colorWipeNoShow2(strip.Color(255,0,0),0,16);
  colorWipeNoShow2(strip.Color(255,0,0),0,23);
  strip.show();
  delay(500);
  strip.clear();
  

  if(hour1 == 0){
    hour10();
  }
  if(hour1 == 1){
    hour11();
  }

  if(hour2 == 0){
    hour20();
  }
  if(hour2 == 1){
    hour21();
  }
  if(hour2 == 2){
    hour22();
  }
  if(hour2 == 3){
    hour23();
  }
  if(hour2 == 4){
    hour24();
  }
  if(hour2 == 5){
    hour25();
  }
  if(hour2 == 6){
    hour26();
  }
  if(hour2 == 7){
    hour27();
  }
  if(hour2 == 8){
    hour28();
  }
  if(hour2 == 9){
    hour29();
  }

  colonOn();

  if(hour3 == 0){
    hour30();
 }
  if(hour3 == 1){
    hour31();
  }
  if(hour3 == 2){
    hour32();
  }
  if(hour3 == 3){
    hour33();
  }
  if(hour3 == 4){
    hour34();
  }
  if(hour3 == 5){
    hour35();
  }
  if(hour3 == 6){
    hour36();
  }
  if(hour3 == 7){
    hour37();
  }
//  if(hour3 = 8){
//    hour38();
//  }
  if(hour3 == 9){
    hour39();
  }
  if(hour4 == 0){
    hour40();
  }
  if(hour3 == 1){
    hour41();
  }
  if(hour4 == 2){
    hour42();
  }
  if(hour4 == 3){
    hour43();
  }
  if(hour4 == 4){
    hour44();
  }
  if(hour4 == 5){
    hour45();
  }
  if(hour4 == 6){
    hour46();
  }
  if(hour4 == 7){
    hour47();
  }
//  if(hour4 = 8){
//    hour48();
//  }
  if(hour4 == 9){
    hour49();
  }

  delay(60000);

strip.clear();

  
//  colorWipe(strip.Color(255, 0, 0), 50, 5); // Red
//  colorWipe(strip.Color(0, 255, 0), 50, 3); // Green
//  colorWipe(strip.Color(0, 0, 255), 50, 12); // Blue
//colorWipe(strip.Color(0, 0, 0, 255), 50); // White RGBW
  // Send a theater pixel chase in...
//  theaterChase(strip.Color(127, 127, 127), 50); // White
//  theaterChase(strip.Color(127, 0, 0), 50); // Red
//  theaterChase(strip.Color(0, 0, 127), 50); // Blue
//
//  rainbow(20);
//  rainbowCycle(20);
//  theaterChaseRainbow(50);
}

// Fill the dots one after the other with a color

void colorWipeNoShow(uint32_t c, uint8_t wait, uint8_t num) {
  for(uint16_t i=num * 10 - 10; i< num * 10; i++) {
    strip.setPixelColor(i, c);
  }
}

void colonOn(){
  for(uint16_t i=141; i<= 149; i++) {
    strip.setPixelColor(i, strip.Color(255,0,0));
    strip.show();
    delay(5);
  }
}

void colorWipeNoShow2(uint32_t c, uint8_t wait, uint8_t num) {
  for(uint16_t i=num * 10 - 2; i< num * 10 + 8; i++) {
    strip.setPixelColor(i, c);
  }
}
void colorWipe(uint32_t c, uint8_t wait, uint8_t num) {
  for(uint16_t i=num * 10 - 10; i< num * 10; i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(5);
  }
}

void colorWipe2(uint32_t c, uint8_t wait, uint8_t num){
  for(uint16_t i=num * 10 - 2; i< num * 10 + 8; i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(5);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

void colorWipeAll(uint32_t c, uint8_t wait){
  for(uint16_t i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i  , c); // Draw new pixel
      //strip.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip.show(); 
      delay(wait);
}}

void hour10(){
  colorWipe(strip.Color(255, 0, 0), 50, 1); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 2); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 3); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 4); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 5); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 6); // Red
}

void hour11(){
  colorWipe(strip.Color(255, 0, 0), 50, 4); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 5); // Red
}
void hour20(){
  colorWipe(strip.Color(255, 0, 0), 50, 8); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 9); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 13); // Red
}
void hour21(){
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
}
void hour22(){
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 8); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 13); // Red
}
void hour23(){
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 13); // Red
}
void hour24(){
  colorWipe(strip.Color(255, 0, 0), 50, 9); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
}
void hour25(){
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 9); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 13); // Red
}
void hour26(){
  colorWipe(strip.Color(255, 0, 0), 50, 8); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 13); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
}
void hour27(){
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
}
void hour28(){
  colorWipe(strip.Color(255, 0, 0), 50, 8); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 9); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 13); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
}
void hour29(){
  colorWipe(strip.Color(255, 0, 0), 50, 9); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 10); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 11); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 12); // Red
  colorWipe(strip.Color(255, 0, 0), 50, 14); // Red
}

void hour30(){
  colorWipe2(strip.Color(255, 0, 0), 50, 15); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 16); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 20); // Red
}
void hour31(){
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
}
void hour32(){
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 15); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 20); // Red
}
void hour33(){
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 20); // Red
}
void hour34(){
  colorWipe2(strip.Color(255, 0, 0), 50, 16); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
}
void hour35(){
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 16); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 20); // Red
}
void hour36(){
  colorWipe2(strip.Color(255, 0, 0), 50, 15); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 20); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
}
void hour37(){
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
}
void hour38(){
  colorWipe2(strip.Color(255, 0, 0), 50, 15); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 16); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 20); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
}
void hour39(){
  colorWipe2(strip.Color(255, 0, 0), 50, 16); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 17); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 18); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 19); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 21); // Red
}

void hour40(){
  colorWipe2(strip.Color(255, 0, 0), 50, 22); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 23); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 27); // Red
}
void hour41(){
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
}
void hour42(){
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 22); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 27); // Red
}
void hour43(){
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 27); // Red
}
void hour44(){
  colorWipe2(strip.Color(255, 0, 0), 50, 23); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
}
void hour45(){
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 23); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 27); // Red
}
void hour46(){
  colorWipe2(strip.Color(255, 0, 0), 50, 22); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 27); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
}
void hour47(){
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
}
void hour48(){
  colorWipe2(strip.Color(255, 0, 0), 50, 22); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 23); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 27); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
}
void hour49(){
  colorWipe2(strip.Color(255, 0, 0), 50, 23); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 24); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 25); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 26); // Red
  colorWipe2(strip.Color(255, 0, 0), 50, 28); // Red
}
// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
  for (int j=0; j<10; j++) {  //do 10 cycles of chasing
    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, c);    //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

//Theatre-style crawling lights with rainbow effect
void theaterChaseRainbow(uint8_t wait) {
  for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
